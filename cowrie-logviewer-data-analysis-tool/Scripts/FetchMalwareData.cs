using cowrie_logviewer_data_analysis_tool.Runner;
using cowrie_logviewer_data_analysis_tool.Util;
using CsvHelper;
using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using static cowrie_logviewer_data_analysis_tool.Scripts.FetchMalwareData.AllData;

namespace cowrie_logviewer_data_analysis_tool.Scripts
{
    public class FetchMalwareData : BaseScript, IReadWriteFiles
    {
        public override string ScriptName => "FetchMalwareData";

        public override string Description => "Generates CSV-file of counties connected to the cowrie server over time";

        public override string By => "mauh@itu.dk & milr@itu.dk 2020";

        Dictionary<string, DownloadFile> storedDls = new Dictionary<string, DownloadFile>();
        Dictionary<string, DownloadFile> dls = new Dictionary<string, DownloadFile>();

        public override void Setup()
        {
            InFolder = Directory.CreateDirectory(@"C:\Users\thelu\Repos\cowrie-logviewer-data-analysis-tool\cowrie-logviewer-data-analysis-tool\bin\CowrieA\Download analyser.2020-05-11T22.52");
            InFiles = new List<string>() { "OUT.Download analyser2020-05-11T22.52.0.json", "MalwareData.json" };

            OutExtension = "json";

            var parent = Directory.GetParent(Directory.GetCurrentDirectory()).CreateSubdirectory("CowrieA");
            var f = parent.CreateSubdirectory($"{ReplaceInvalidChars(ScriptName)}.{DateTime.Now.ToString(ScriptDateTimeFormat)}");
            Trace.WriteLine("Working path: " + f.FullName);
            OutFolder = f;

            Console.WriteLine("Read from Read from DownloadAnalyser DataFile? (D) or Read from Prexisting MalwareDataFile (P) or Both for merging (B)");
            var ch = Console.ReadKey(true);
            if (ch.Key == ConsoleKey.D)
                ReadfromDataFile(Path.Combine(InFolder.FullName, InFiles[0]));
            else if (ch.Key == ConsoleKey.P)
            {
                ReadfromDataFile(Path.Combine(InFolder.FullName, InFiles[1]));
            }
            else if (ch.Key == ConsoleKey.B)
            {
                ReadfromDataFile(Path.Combine(InFolder.FullName, InFiles[1]));
                ReadfromDataFile(Path.Combine(InFolder.FullName, InFiles[0]));
            }
            else {
                Environment.Exit(-1);
            }
        }

        public void ReadfromDataFile(string InputFilePath)
        {
            var lines2 = TextFileHandler.ReadLinesOfFile(InputFilePath);
            for (int i = 0; i < lines2.Length; i++)
            {
                var js = JsonConvert.DeserializeObject<DownloadFile>(lines2[i]);
                if(!storedDls.ContainsKey(js.sha2)) storedDls.Add(js.sha2, js);
            }
        }

        public override void Run()
        {
            var limit = 10;//Per min
            var limitCount = 0;
            var limitOn = true;
            //var md = Fetch("").Result;
            using (var writer = new StreamWriter(Path.Combine(OutFolder.FullName, "MalwareData.json")))
            {
                writer.AutoFlush = true;
                foreach (var item in storedDls)
                {
                    var key = item.Key;
                    var newItem = item;

                    if (item.Value.malwareDTO != null) {
                        dls.Add(key, newItem.Value);
                        writer.WriteLine(JsonConvert.SerializeObject(item.Value, Formatting.None));
                        continue;
                    }

                    if (limitCount > limit && limitOn) { limitCount = 0; Thread.Sleep(1000 * 60); }

                    var res = Fetch(key).Result;

                    var md = res.Item1;
                    
                    Trace.Write(key);
                    if (res.Item2 == HttpStatusCode.NotFound)
                    {
                        Trace.WriteLine(" -> Not found");
                    }
                    else if (md.data == null)
                    {
                        limit = 4;
                        limitCount = limit;
                        Trace.WriteLine(" -> Error " + res.Item2.ToString() + " If 429, wait until the next hour starts");
                        var nt = (60 - DateTime.Now.Minute) * 60 * 1000;
                        Trace.WriteLine("Sleeping for " + (60 - DateTime.Now.Minute) + " min");
                        Thread.Sleep(nt);
                        continue;
                    }
                    else
                    {
                        Trace.WriteLine(" -> Content");
                        limitCount++;
                        var t = md.engineResults(md.data.attributes.last_analysis_results);
                    }
                    newItem.Value.malwareDTO = md;

                    foreach (var i in dls)
                    {
                        if (i.Value.malwareDTO.data.attributes.size == newItem.Value.malwareDTO.data.attributes.size) {

                            i.Value.ips.AddRange(newItem.Value.ips);
                            
                        }
                    }

                    dls.Add(key, newItem.Value);
                    writer.WriteLine(JsonConvert.SerializeObject(item.Value, Formatting.None));
                }
            }

            var cowriePath = Directory.CreateDirectory(@"C:\Users\thelu\OneDrive\Skrivebord\honeypotlogs 26_04\cowrie");
            ReadFilesWriteToFile(cowriePath.FullName, "cowrie.json.*", OutFile.Substring(0, OutFile.Length - 5) + ".json");
            
        }

        private static HttpClient Client = new HttpClient();

        internal async Task<(MalwareDTO,HttpStatusCode)> Fetch(string key)
        {
            var httpRequestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(@"https://www.virustotal.com/api/v3/files/"+key/*"https://raw.githubusercontent.com/BlackPhlox/cowrie-logviewer-data-analysis-tool/master/cowrie-logviewer-data-analysis-tool/test.json"*/),
                Headers = {
                { HttpRequestHeader.Accept.ToString(), "*/*" },
                { "x-apikey", File.ReadAllText(TextFileHandler.GetSrcPath("Data","virustotalapi.secret")) }
            }
            };

            var response = await Client.SendAsync(httpRequestMessage);
            var res_out = await response.Content.ReadAsStringAsync();
            MalwareDTO malData = JsonConvert.DeserializeObject<MalwareDTO>(res_out);
            return (malData,response.StatusCode);
        }

        internal class AllData {
            public DownloadFile df { get; set; }
            public EventDTO ed { get; set; }

            public class DisplayData {
                public string ip { get; set; }
                public string date { get; set; }
                public long count { get; set; }
                public long size { get; set; }
                public string type { get; set; }
                public string magic { get; set; }
                public string filename { get; set; }
                public string meaningful_name { get; set; }
                public string modifydate { get; set; }
                public string sha2 { get; set; }
                public List<IpDate> ips { get; set; }

                public static DisplayData Parse(AllData ad) {
                    var tmp = ad.df.malwareDTO.engineResults(ad.df.malwareDTO.data.attributes.last_analysis_results).Select(s => s.result).Where(s => s != null);
                    return new DisplayData() {
                        size = ad.df.malwareDTO.data.attributes.size,
                        type = tmp.All(t => t == null)?null:string.Join(", ", tmp),
                        count = ad.df.count,
                        ip = ad.ed.src_ip,
                        date = ad.ed.timestamp,
                        magic = ad.df.malwareDTO.data.attributes.magic,
                        meaningful_name = ad.df.malwareDTO.data.attributes.meaningful_name,
                        modifydate = ad.df.malwareDTO.data.attributes.exiftool.ModifyDate,
                        sha2 = ad.df.sha2,
                        ips = ad.df.ips,
                        filename = ad.ed.filename
                    };
                }
            }
        }

        public BlockingCollection<string> ReadFilesWriteToFile(string folder, string fileNameWC, string toFile)
        {
            var matchesCollection = new BlockingCollection<string>();

            var files = Directory.GetFiles(folder, fileNameWC,
                                         SearchOption.TopDirectoryOnly);

            Console.WriteLine("Reading Folder: " + folder);
            var exceptions = new ValueTuple<string, Regex>[]
                {
                    ("change password", new Regex("CMD: echo \"root")) ,
                    ("change password", new Regex("CMD: echo -e \"")) ,
                    ("change password", new Regex(@"\|passwd")),
                    ("change password", new Regex(" > /tmp/up.txt"))
                };
            var readTask = Task.Run(() =>
            {
                using (var writer = new StreamWriter(toFile))
                {
                    //List<string> cmds = new List<string>();
                    List<DisplayData> cmds = new List<DisplayData>();
                    try
                    {
                        foreach (var file in files)
                        {
                            string line2 = "";
                            try
                            {
                                using (var reader = new StreamReader(file))
                                {
                                    string line;

                                    while ((line = reader.ReadLine()) != null)
                                    {
                                        line2 = line;
                                        EventDTO _event = null;

                                        try
                                        {
                                            _event = JsonConvert.DeserializeObject<EventDTO>(line);
                                        }
                                        catch (Exception)
                                        {
                                            continue;
                                        }
                                        if (_event.eventid != "cowrie.session.file_upload") continue;

                                        foreach (var item in dls)
                                        {
                                            if (item.Value.ips == null) continue;
                                            foreach (var ii in item.Value.ips)
                                            {
                                                if ( ii.sha2 == _event.shasum)
                                                {
                                                    ii.ip = _event.src_ip;
                                                    ii.date = DateTime.Parse(_event.timestamp);
                                                }
                                            }
                                        }

                                        foreach (var item in dls)
                                        {
                                            if (item.Value.ips == null) continue;
                                            foreach (var ii in item.Value.ips)
                                            {
                                                if (ii.sha2 == _event.shasum)
                                                {
                                                    var ad = new AllData() { df = item.Value, ed = _event };
                                                    cmds.Add(DisplayData.Parse(ad));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            catch (DirectoryNotFoundException e)
                            {
                                Console.WriteLine(e.StackTrace);
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(line2);
                                Console.WriteLine(e.StackTrace);
                            }
                        }
                    }

                    finally
                    {
                        matchesCollection.CompleteAdding();
                    }

                    writer.WriteLine(JsonConvert.SerializeObject(cmds, Formatting.Indented));

                }
            });

            Task.WaitAll(readTask);

            return matchesCollection;
        }
    }
}
